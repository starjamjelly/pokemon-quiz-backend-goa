// Code generated by goa v3.14.0, DO NOT EDIT.
//
// app gRPC client encoders and decoders
//
// Command:
// $ goa gen app/design

package client

import (
	app "app/gen/app"
	apppb "app/gen/grpc/app/pb"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildSelectFunc builds the remote method to invoke for "app" service
// "select" endpoint.
func BuildSelectFunc(grpccli apppb.AppClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Select(ctx, reqpb.(*apppb.SelectRequest), opts...)
		}
		return grpccli.Select(ctx, &apppb.SelectRequest{}, opts...)
	}
}

// EncodeSelectRequest encodes requests sent to app select endpoint.
func EncodeSelectRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*app.SelectPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("app", "select", "*app.SelectPayload", v)
	}
	return NewProtoSelectRequest(payload), nil
}

// DecodeSelectResponse decodes responses from the app select endpoint.
func DecodeSelectResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*apppb.SelectResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("app", "select", "*apppb.SelectResponse", v)
	}
	res := NewSelectResult(message)
	return res, nil
}

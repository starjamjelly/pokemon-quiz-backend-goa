// Code generated by goa v3.14.0, DO NOT EDIT.
//
// app gRPC client CLI support package
//
// Command:
// $ goa gen app/design

package cli

import (
	appc "app/gen/grpc/app/client"
	"flag"
	"fmt"
	"os"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `app select
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` app select --message '{
      "type": "Qui nesciunt aut maxime rerum."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, any, error) {
	var (
		appFlags = flag.NewFlagSet("app", flag.ContinueOnError)

		appSelectFlags       = flag.NewFlagSet("select", flag.ExitOnError)
		appSelectMessageFlag = appSelectFlags.String("message", "", "")
	)
	appFlags.Usage = appUsage
	appSelectFlags.Usage = appSelectUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "app":
			svcf = appFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "app":
			switch epn {
			case "select":
				epf = appSelectFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "app":
			c := appc.NewClient(cc, opts...)
			switch epn {
			case "select":
				endpoint = c.Select()
				data, err = appc.BuildSelectPayload(*appSelectMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// appUsage displays the usage of the app command and its subcommands.
func appUsage() {
	fmt.Fprintf(os.Stderr, `The app service provides some pokemon api.
Usage:
    %[1]s [globalflags] app COMMAND [flags]

COMMAND:
    select: Select implements select.

Additional help:
    %[1]s app COMMAND --help
`, os.Args[0])
}
func appSelectUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] app select -message JSON

Select implements select.
    -message JSON: 

Example:
    %[1]s app select --message '{
      "type": "Qui nesciunt aut maxime rerum."
   }'
`, os.Args[0])
}
